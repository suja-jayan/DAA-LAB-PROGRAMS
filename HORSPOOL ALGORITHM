#include <iostream>
#include <cstring>

const int MAX_CHAR = 256;

void buildShiftTable(char pattern[], int m, int shiftTable[]) {
    for (int i = 0; i < MAX_CHAR; i++) {
        shiftTable[i] = m;
    }
    
    for (int j = 0; j <= m - 2; j++) {
        shiftTable[static_cast<int>(pattern[j])] = m - 1 - j;
    }
}

void horspool(char text[], char pattern[]) {
    int n = strlen(text);
    int m = strlen(pattern);
    int shiftTable[MAX_CHAR];
    
    buildShiftTable(pattern, m, shiftTable);
    
    int i = m - 1;
    
    while (i <= n - 1) {
        int k = 0;
        while (k <= m - 1 && pattern[m - 1 - k] == text[i - k]) {
            k++;
        }
        
        if (k == m) {
            std::cout << "Pattern found at position " << i - m + 2 << std::endl;
            return; // Comment this line to find all occurrences
        } else {
            i += shiftTable[static_cast<int>(text[i])];
        }
    }
    
    std::cout << "Pattern not found in the given text." << std::endl;
}

int main() {
    char text[100], pattern[25];
    
    std::cout << "Enter the Text: ";
    std::cin.getline(text, sizeof(text));
    
    std::cout << "Enter the Pattern: ";
    std::cin.getline(pattern, sizeof(pattern));
    
    horspool(text, pattern);
    
    return 0;
}
